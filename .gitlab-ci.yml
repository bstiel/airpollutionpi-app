stages:
  - build
  - test
  - push
  - cleanup
  - deploy

before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin

build:
  stage: build
  script:
    - echo {\"version\"":" \"$(git describe --always)\"} > version.json
    - docker build --pull --tag "$CI_REGISTRY_IMAGE":"$CI_BUILD_REF_NAME" .

test:
  stage: test
  script:
    - export CI_BUILD_REF_NAME=$CI_BUILD_REF_NAME
    - docker-compose -f docker-compose.test.yml down  --remove-orphans
    - docker-compose -f docker-compose.test.yml up -d
    - docker-compose -f docker-compose.test.yml exec -T "$CI_PROJECT_NAME" /scripts/wait-for-it.sh db:5432 -t 90 -- python manage.py test -v 2 --noinput
    - docker-compose -f docker-compose.test.yml down

push image:
  stage: push
  script:
    - docker push "$CI_REGISTRY_IMAGE":"$CI_BUILD_REF_NAME"

cleanup:
  stage: cleanup
  when: always
  script:
    - docker-compose -f docker-compose.test.yml down

deploy:
  when: manual
  stage: deploy
  variables:
    IP_ADDRESS: "52.56.43.131"
    SSH_PORT: "22"
    DEPLOY_USER: "ubuntu"
    RUN_USER: "ubuntu"
    RUN_DIR: "/home/ubuntu/datalake"
  script: &deploy_script
    - echo "deploying version $(git describe --always --tags) to $HOST"
    
    - echo "stamp image version on docker-compose"
    - echo "deploying tag $CI_BUILD_REF_NAME"
    - sed -i "s/{{ version }}/$CI_BUILD_REF_NAME/" ./docker-compose.deploy.yml
    - sed -i "s/{{ env }}/$CI_ENVIRONMENT_NAME/" ./docker-compose.deploy.yml

    - echo "copy docker-compose files via deploy user to run user"
    - sed -i "s/\${DOMAIN}/$HOST/" ./docker-compose.deploy.yml
    - scp -P $SSH_PORT docker-compose.deploy.yml "$DEPLOY_USER"@"$HOST":docker-compose.deploy.yml
    - ssh -p $SSH_PORT "$DEPLOY_USER"@"$HOST" scp -P $SSH_PORT docker-compose.deploy.yml "$RUN_USER"@localhost:"$RUN_DIR"/docker-compose.yml

    - echo "update/restart"
    - ssh -p $SSH_PORT "$DEPLOY_USER"@"$HOST" ssh -p $SSH_PORT "$RUN_USER"@localhost docker volume create $CI_PROJECT_NAME_apidocs || true
    - ssh -p $SSH_PORT "$DEPLOY_USER"@"$HOST" ssh -p $SSH_PORT "$RUN_USER"@localhost docker-compose -f "$RUN_DIR"/docker-compose.yml pull
    - ssh -p $SSH_PORT "$DEPLOY_USER"@"$HOST" ssh -p $SSH_PORT "$RUN_USER"@localhost docker-compose -f "$RUN_DIR"/docker-compose.yml down --remove-orphans
    - ssh -p $SSH_PORT "$DEPLOY_USER"@"$HOST" ssh -p $SSH_PORT "$RUN_USER"@localhost docker-compose -f "$RUN_DIR"/docker-compose.yml up -d